"""
다이나믹 프로그래밍은 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방법
이미 계산된 결과는 별도의 메모리 영역에 저장하여 다시 계산하지 않도록 한다.
주로 탑다운 방식과 바텀업 방식 존재

조건1 : 최적 부분 구조 - 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결
조건2 : 중복되는 부분 문제 - 동일한 작은 문제를 반복적으로 해결

예시1) 피보나치 수열
점화식 : 인접한 항들 사이의 관계식
-> 재귀함수 - 중복되는 부분 문제(f2가 여러 번 호출) -> 시간이 너무 오래걸림
조건 1, 조건 2 만족 -> DP 사용

하향식(탑다운) - 메모이제이션
한번 계산한 결과를 메모리 공간에 메모하는 기법(캐싱)
주로 하향식(탑다운) 사용 - 결과 저장용 리스트는 DP 테이블 이라고 부름

상향식(바텀업)
작은 문제들 부터 큰 문제 순서대로 차례대로 계산
"""

# 탑다운(하향식) - 메모이제이션 / 피보나치 수열

# 메모이제이션을 위한 DP 테이블
# d = [0] * 100

# def fibo(x):
#     if x == 1 or x == 2:
#         return 1
    
#     if d[x] != 0:
#         return d[x]
    
#     d[x] = fibo(x-1) + fibo(x-2)
#     return d[x]

# print(fibo(99))

# 바텀업(상향식)
# d = [0] * 100

# d[1] = 1
# d[2] = 1
# n = 99

# for i in range(3, n+1):
#     d[i] = d[i-1] + d[i-2]

# print(d[n])

"""

"""